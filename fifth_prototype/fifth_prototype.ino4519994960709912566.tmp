/*Control Panel---------------------------------------------------------------*/
/*Libraries*/
//ESP8266 Library
#include <ESP8266WiFi.h>

//Async Server & WebSocket Library
#include "IPAddress.h"
#include "Hash.h"
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <WebSocketsServer.h>

//Mesh Library
#include <list>
#include "painlessMesh.h"

//QMC5883L Library
#include <QMC5883L.h>
#include <Wire.h>

//FUSION/MPU6050 Library
#include "Kalman.h"

//PID Library
#include<PID_v1.h>

/*Control Variables*/
//Serial Controls
#define SERIAL      1       //for configuring Serial on or off  z
#define SERIAL_GPIO 0       //to set Tx, Rx pin as GPIOs        z

//I2C Controls
#define I2C_COM     1       //for enabling I2C on SDA (D3), SCL (D1)  z

//WIFI Controls
#define WIFISCANNER 0       //for enabling WIFI signal scanning z
#define WIFIAPMODE  0       //for configuring own access point  z

//Async Server & WebSocket Controlsrpm
#define ASYNCSERVER 0       //for setup of AsyncWebServer
#define WEBSOCKET   0       //for setup of WebSocket

//Mesh Controls
#define MESHNETWORK 0       //for setup of Mesh network z
#define ROOT "807D3A235911" //specify who is root (MAC)
#define ROOTID 975395089    //specify root ID
bool isROOT = 0;

//Battery Controls
#define BATTERYREADER   0   //for detecting battery voltage & percent z

//QMC5883L Controls
#define QMC5883LMODULE  0   //for setup of compass module
#define QMC5883LPRINT   0   //for printing out values
#define QMC_MANUAL_CAL  0   //specify if manual calibration set
#define QMC_AUTO_CAL    0   //specify if robot calibrates itself by rotating

//MPU6050 Controls
#define MPU6050MODULE   1   //for setup of MPU6050 module
#define MPU6050PRINT    1   //for printing out values

//Sensor Fusion Controls
#define FUSION          0   //for setup of fusion data for MPU6050 and QMC5883L
#define FUSIONPRINT     0   //for printing out values
#define FUSIONRAW       1   //to output raw data
#define FUSIONTILT      1   //to calculate data compensated with tilt
#define FUSIONCOMP      1   //to calculate data using complementary filter
#define FUSIONKALMAN    1   //to calculate data using kalman filter
#define FUSIONTEMP      0   //to use temporary YAW during movement

//Encoder Controls
#define ENCODER_L 1         //for enabling Left encoder on pin D2   z
#define ENCODER_R 1         //for enabling Right encoder on pin D6  z

//PID Controls
#define PID_CONTINUOUS  1   //for testing PID algorithm on continuous wheel

//Motor Controls
#define MOTOR_CONTROL_L 0   //for enabling/disabling left motor
#define MOTOR_CONTROL_R 0   //for enabling/disabling right motor
#define STARTUP_NORTH   0   //to auto turn to North on startup

//Bump Button Controls
#define BUMP_L  1           //for enabling bump sensor on D4  z
#define BUMP_R  0           //for enabling bump sensor on TX  z
#define BUMP_B  1           //for enabling bump sensor on D0  z

/*Global Variables*/
#define M_PI 3.14159265358979323846264338327950288
Scheduler taskScheduler;

volatile int step_counter = 0;
volatile bool getBattery = 0;
volatile bool getQMC5883L = 0;
volatile bool getMPU6050 = 0;
volatile bool getFusion = 0;
volatile bool startScan = 0;
volatile bool getScan = 0;
/*End of Control Panel--------------------------------------------------------*/
/*Replace TXRX pins Code------------------------------------------------------*/
const uint8_t TX = 1; //GPIO1 (TX)
const uint8_t RX = 3; //GPIO3 (RX)

void TXRX_to_GPIO() {
  pinMode(TX, FUNCTION_3);
  pinMode(RX, FUNCTION_3);
}
void TXRX_to_DEFAULT() {
  pinMode(TX, FUNCTION_0);
  pinMode(RX, FUNCTION_0);
}
/*End of TXRX Replace Code----------------------------------------------------*/
/*Battery Voltage Reader Code-------------------------------------------------*/
/* The battery voltage passes through a voltage divider circuit of:
   V_A0 = V_BAT (R1/R1+R2)
   Where
   R1 = 10k ohm
   R2 = 16k ohm
   V_BAT = 8.4V(max) or 7.4V(nominal)
   V_A0 = 3.231V(max) or 2.846V(nominal)
   Note: Battery voltage input is also connected to Buck converter input
   CRITICAL EDIT:
   Since NodeMCU already has a fixed built-in voltage divider of
   Node_A0 = V_A0 (R3/R3+R4)
   Where
   R3 = 100k ohm
   R4 = 220k ohm
   The addition of another voltage divider from above has caused some changes,
   V_A0 = 0.377(V_BAT)
   Node_A0 = 0.3125(V_A0)
           = 0.1178(V_BAT)
   Thus, the concluded expected voltages are:
   V_BAT = 8.4V(max) or 7.4V(nominal)
   V_A0 = 3.167V(max) or 2.789(nominal)   //0.377 V_BAT
   Node_A0 = 0.989V(max) or 0.872V(nominal) //0.3125*0.377 V_BAT
*/
#define R1 10 //external resistor in k
#define R2 16 //external resistor in k
#define R3 100  //built-in resistor in k
#define R4 220  //built-in resistor in k
#define NODEMCU_VOLT 3.33
#define BATTERY_CONSTANT 0.228

const uint8_t BAT_IN = A0;  //set Battery input pin

float BAT_voltage, BAT_percent;

void BATTERY_read();
Task readBattery(1000, TASK_FOREVER, &BATTERY_read);

void BATTERY_Setup() {
  if (BATTERYREADER) {
    taskScheduler.addTask(readBattery);
    readBattery.enable();
  }
}
void BATTERY_read() {
  int analogInput = analogRead(BAT_IN);
  float A0_voltage = ((float)analogInput / 1023) * NODEMCU_VOLT; //convert into 3.3V range
  BAT_voltage = (A0_voltage / 0.377); //convert into 8.4V range
  if (BAT_voltage > BATTERY_CONSTANT)
    BAT_voltage -= BATTERY_CONSTANT;  //then deduct by 0.228V constant due to error
  BAT_percent = (BAT_voltage / 8.4) * 100; //convert into percentage
  Serial.printf("raw:%d,A0:%.2f,BAT:%.2f,Prcnt:%.2f%%\n", analogInput, A0_voltage, BAT_voltage, BAT_percent);
  getBattery = 1; //to signify done
}
/*End of Battery Votlage Reader Code------------------------------------------*/
/*Path Loss Model Code--------------------------------------------------------*/
/* The estimated distance is calculated based on RSSI using a modified version of
   Solah's model, which adds in a constant of -3 based on compiled test results.
   The RSSI calculation assumes signal travels in LOS, indoors.
   Seng's (modified Solah's) = PLo + 10*n*log_10(d) + (-3)
   d = 10^( (RSSI-PLo-(-3)) / (10*n) )
   Note: The input, targetRSSI should be in -dBm
*/
const float PLo = 50.667;
const float PLn = 2.667;
const float PLc = -3;

float PL_calcDistance(float targetRSSI) {
  float distance;
  distance = (targetRSSI - PLo - PLc); //(RSSI-PLo-(-3) part
  distance = distance / (10 * PLn); //divide previous by (10*n)
  distance = pow(10, distance);     //10 power of previous result
  return distance;
}
/*End of Path Loss Model Code-------------------------------------------------*/
/*QMC5883L Codes--------------------------------------------------------------*/
#define MAG_CAL_PERIOD 15000  // 15000ms, 15sec
QMC5883L compass;

int16_t MagX, MagY, MagZ, Xmax, Xmin, Ymax, Ymin, Zmax, Zmin;
float Xoffset, Yoffset, Zoffset, declinationAngle = 0;
float rawHeading = 0;
uint32_t QMC5883L_timer;
bool RightHemis = 1;  //initially turn to north, then move to right hemisphere to check

void QMC5883L_print();
Task readCompass(10, TASK_FOREVER, &QMC5883L_read);
Task printCompass(10, TASK_FOREVER, &QMC5883L_print);

void QMC5883L_Setup() {
  if (QMC5883LMODULE) {
    declinationAngle = (0.0 - (19.0 / 60.0) / (180.0 / M_PI)); //calculate declination
    compass.init();
    if (QMC_MANUAL_CAL) {   //if manual set calibration
      compass.setCalibration(3710, -5240, 6042, -5175);
    }
    else if (QMC_AUTO_CAL) { //robot auto rotate to calibrate
      QMC5883L_autocalibrate();
    }
    else {                  //manually calibrate by moving the robot
      QMC5883L_calibrate();
    }
    if (!FUSION && QMC5883LMODULE && QMC5883LPRINT) {
      if (QMC5883LPRINT) {
        taskScheduler.addTask(printCompass);
        printCompass.enable();
      }
      else {
        taskScheduler.addTask(readCompass);
        readCompass.enable();
      }
    }
  }
}
void QMC5883L_read() {     //retrieve data and store in variables
  rawHeading = compass.readHeading();
  compass.readRaw(&MagX, &MagY, &MagZ);
  compass.readCalFull(&Xmax, &Xmin, &Ymax, &Ymin, &Zmax, &Zmin);
  Xoffset = (float)(Xmax + Xmin) / 2;
  Yoffset = (float)(Ymax + Ymin) / 2;
  Zoffset = (float)(Zmax + Zmin) / 2;
  MagX = MagX - Xoffset;
  MagY = MagY - Yoffset;
  MagZ = MagZ - Zoffset;
  getQMC5883L = 1; //to signify done
}
void QMC5883L_print() { //data not fused with MPU6050
  QMC5883L_read();
  Serial.printf("H:%f,", rawHeading);
  Serial.printf("X:%d,x:%d,", Xmax, Xmin);
  Serial.printf("Y:%d,y:%d,", Ymax, Ymin);
  Serial.printf("Z:%d,z:%d\n", Zmax, Zmin);
  Serial.println();
}
void QMC5883L_calibrate() { //adjust for soft/hard iron
  QMC5883L_timer = millis();
  while ( (millis() - QMC5883L_timer) < MAG_CAL_PERIOD) { //calibrate manually 15 sec
    QMC5883L_read();
    Serial.printf("X:%d,x:%d,Y:%d,y:%d,Z:%d,z:%d\n", Xmax, Xmin, Ymax, Ymin, Zmax, Zmin);
    yield();
  }
}
void PID_Cali_Rotate();
void QMC5883L_autocalibrate(){
  PID_Cali_Rotate();
}
/*End of QMC5883L Codes-------------------------------------------------------*/
/*MPU6050 Code----------------------------------------------------------------*/
// MPU6050 Slave Device Address
const uint8_t MPU6050SlaveAddress = 0x68;

// sensitivity scale factor respective to full scale setting provided in datasheet
const uint16_t AccelScaleFactor = 16384;
const uint16_t GyroScaleFactor = 131;

// MPU6050 few configuration register addresses
const uint8_t MPU6050_REGISTER_SMPLRT_DIV   =  0x19;
const uint8_t MPU6050_REGISTER_USER_CTRL    =  0x6A;
const uint8_t MPU6050_REGISTER_PWR_MGMT_1   =  0x6B;
const uint8_t MPU6050_REGISTER_PWR_MGMT_2   =  0x6C;
const uint8_t MPU6050_REGISTER_CONFIG       =  0x1A;
const uint8_t MPU6050_REGISTER_GYRO_CONFIG  =  0x1B;
const uint8_t MPU6050_REGISTER_ACCEL_CONFIG =  0x1C;
const uint8_t MPU6050_REGISTER_FIFO_EN      =  0x23;
const uint8_t MPU6050_REGISTER_INT_ENABLE   =  0x38;
const uint8_t MPU6050_REGISTER_ACCEL_XOUT_H =  0x3B;
const uint8_t MPU6050_REGISTER_SIGNAL_PATH_RESET  = 0x68;

int16_t AccelX, AccelY, AccelZ, Temperature, GyroX, GyroY, GyroZ;
float Ax, Ay, Az, T, Gx, Gy, Gz;

Task readMPU(10, TASK_FOREVER, &MPU6050_read);
Task printMPU(10, TASK_FOREVER, &MPU6050_print);

void I2C_Write(uint8_t deviceAddress, uint8_t regAddress, uint8_t data) {
  Wire.beginTransmission(deviceAddress);
  Wire.write(regAddress);
  Wire.write(data);
  Wire.endTransmission();
}
void MPU6050_Setup() {
  if (MPU6050MODULE) {
    delay(150); //let module settle down first
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_SMPLRT_DIV, 0x07);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_PWR_MGMT_1, 0x01);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_PWR_MGMT_2, 0x00);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_CONFIG, 0x00);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_GYRO_CONFIG, 0x00);//set +/-250 degree/second full scale
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_ACCEL_CONFIG, 0x00);// set +/- 2g full scale
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_FIFO_EN, 0x00);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_INT_ENABLE, 0x01);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_SIGNAL_PATH_RESET, 0x00);
    I2C_Write(MPU6050SlaveAddress, MPU6050_REGISTER_USER_CTRL, 0x00);
  }
  if (!FUSION && MPU6050MODULE) {
    if (MPU6050PRINT) {
      taskScheduler.addTask(printMPU);
      printMPU.enable();
    }
    else {
      taskScheduler.addTask(readMPU);
      readMPU.enable();
    }
  }
}
void MPU6050_readRaw(uint8_t deviceAddress, uint8_t regAddress) {
  Wire.beginTransmission(deviceAddress);
  Wire.write(regAddress);
  Wire.endTransmission();
  Wire.requestFrom(deviceAddress, (uint8_t)14);
  AccelX = (((int16_t)Wire.read() << 8) | Wire.read());
  AccelY = (((int16_t)Wire.read() << 8) | Wire.read());
  AccelZ = (((int16_t)Wire.read() << 8) | Wire.read());
  Temperature = (((int16_t)Wire.read() << 8) | Wire.read());
  GyroX = (((int16_t)Wire.read() << 8) | Wire.read());
  GyroY = (((int16_t)Wire.read() << 8) | Wire.read());
  GyroZ = (((int16_t)Wire.read() << 8) | Wire.read());
}
void MPU6050_read() {
  MPU6050_readRaw(MPU6050SlaveAddress, MPU6050_REGISTER_ACCEL_XOUT_H);

  Ax = (float)AccelX / AccelScaleFactor;
  Ay = (float)AccelY / AccelScaleFactor;
  Az = (float)AccelZ / AccelScaleFactor;
  T  = (float)Temperature / 340 + 36.53; //temperature formula
  Gx = (float)GyroX / GyroScaleFactor;
  Gy = (float)GyroY / GyroScaleFactor;
  Gz = (float)GyroZ / GyroScaleFactor;
  getMPU6050 = 1;
}
void MPU6050_print() {
  MPU6050_read();
  Serial.printf("Ax:%f,Ay:%f,Az:%f\n", Ax, Ay, Az);
//  Serial.printf("T:%f,", T);
//  Serial.printf("Gx:%f,Gy:%f,Gz:%f\n", Gx, Gy, Gz);
}
/*End of MPU6050 Code---------------------------------------------------------*/
/*Sensor Fusion Code----------------------------------------------------------*/
Kalman kalmanX, kalmanY, kalmanZ; // Create the Kalman instances

float tiltHeading;
float AngleX, AngleY, AngleZ;
float compAngleX, compAngleY, compAngleZ;
float kalAngleX, kalAngleY, kalAngleZ;
float roll, pitch, yaw;
float estAngleZrate, estHeading, estDrift, maxDrift, posOffset, negOffset;

uint32_t FUSION_timer, TEMP_timer;

Task readFUSION(10, TASK_FOREVER, &FUSION_read);
Task printFUSION(10, TASK_FOREVER, &FUSION_print);

void FUSION_Setup() {
  if (FUSION && QMC5883LMODULE && MPU6050MODULE) {
    QMC5883L_read();
    MPU6050_read();
    updatePitchRoll();
    updateYaw();

    kalmanX.setAngle(roll);
    AngleX = roll;
    compAngleX = roll;

    kalmanY.setAngle(pitch);
    AngleY = pitch;
    compAngleY = pitch;

    kalmanZ.setAngle(yaw);
    AngleZ = yaw;
    compAngleZ = yaw;

    if (FUSIONTEMP) {
      measureDrift();
    }
    FUSION_timer = micros();
    TEMP_timer = micros();
    if (FUSION) {
      if (FUSIONPRINT) {
        taskScheduler.addTask(printFUSION);
        printFUSION.enable();
      }
      else {
        taskScheduler.addTask(readFUSION);
        readFUSION.enable();
      }
    }
  }
}
void FUSION_read() {
  QMC5883L_read();
  MPU6050_read();

  float dt = (float)(micros() - FUSION_timer) / 1000000; // Calculate delta time
  FUSION_timer = micros();

  updatePitchRoll();
  float AngleXrate = Gx / 131.0;
  float AngleYrate = Gy / 131.0;

  // This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
  if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
    kalmanX.setAngle(roll);
    AngleX = roll;
    compAngleX = roll;
    kalAngleX = roll;
  } else
    kalAngleX = kalmanX.getAngle(roll, AngleXrate, dt); // Calculate the angle using a Kalman filter

  if (abs(kalAngleX) > 90)
    AngleYrate = -AngleYrate; // Invert rate, so it fits the restricted accelerometer reading
  kalAngleY = kalmanY.getAngle(pitch, AngleYrate, dt);

  updateYaw();
  float AngleZrate = AngleZ / 131.0;

  if ((yaw < -90 && kalAngleZ > 90) || (yaw > 90 && kalAngleZ < -90)) {
    kalmanZ.setAngle(yaw);
    AngleZ = yaw;
    compAngleZ = yaw;
    kalAngleZ = yaw;
  } else
    kalAngleZ = kalmanZ.getAngle(yaw, AngleZrate, dt); // Calculate the angle using a Kalman filter

  AngleXrate += AngleXrate * dt;
  AngleYrate += AngleYrate * dt;
  AngleZrate += AngleZrate * dt;

  compAngleX = 0.93 * (compAngleX + AngleXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
  compAngleY = 0.93 * (compAngleY + AngleYrate * dt) + 0.07 * pitch;
  compAngleZ = 0.93 * (compAngleZ + AngleZrate * dt) + 0.07 * yaw;

  // Reset the gyro angles when they has drifted too much
  if (AngleX < -180 || AngleX > 180)
    AngleX = kalAngleX;
  if (AngleY < -180 || AngleY > 180)
    AngleY = kalAngleY;
  if (AngleZ < -180 || AngleZ > 180)
    AngleZ = kalAngleZ;

  rawHeading = noTiltCompensate();
  tiltHeading = tiltCompensate();

  if (tiltHeading == -1000)
    tiltHeading = rawHeading;

  rawHeading -= declinationAngle;
  tiltHeading -= declinationAngle;

  rawHeading = correctAngle(rawHeading);
  tiltHeading = correctAngle(tiltHeading);

  rawHeading = rawHeading * 180 / M_PI;
  tiltHeading = tiltHeading * 180 / M_PI;

  if (FUSIONTEMP) {
    FUSION_tempyaw();
  }
  getFusion = 1; //to signify done
}
void FUSION_tempyaw() {
  MPU6050_read();
  float dt = (float)(micros() - TEMP_timer) / 1000000; // Calculate delta time
  TEMP_timer = micros();
  estAngleZrate = Gz / 131.0;
  estAngleZrate += estAngleZrate * dt;
  if ((floorf(estAngleZrate * 100) / 100) > 0 && estAngleZrate > maxDrift) { //if maxDrift is positive, estAngleZ>0 & >max, then will be true, if negative, if >0 then true
    estHeading += (((floorf(estAngleZrate * 100) / 100) + posOffset + 0.1) * dt);
  }
  else if ((ceilf(estAngleZrate * 100) / 100) < 0 && estAngleZrate < maxDrift) { //if maxDrift is positive, angleZ<0 then true, if negative, angleZ<0 & <max then true
    estHeading += (((ceilf(estAngleZrate * 100) / 100) + negOffset - 0.1) * dt);
  }
}
void FUSION_print() {
  FUSION_read();
  if (FUSIONRAW) {
    Serial.printf("% d,% d,% d,% 4.2f,", MagX, MagY, MagZ, rawHeading);
  }
  if (FUSIONTILT) {
    Serial.printf("% 4.2f,% 4.2f,% 4.2f,% 4.2f,", Ax, Ay, Az, tiltHeading);
  }
  if (FUSIONCOMP) {
    Serial.printf("% 4.2f,% 4.2f,% 4.2f,", compAngleX, compAngleY, compAngleZ);
  }
  if (FUSIONKALMAN) {
    Serial.printf("% 4.2f,% 4.2f,% 4.2f,", kalAngleX, kalAngleY, kalAngleZ);
  }
  if (FUSIONTEMP) {
    Serial.printf("% 4.2f,% 4.2f,", estAngleZrate, estHeading);
  }
  Serial.println();
}
void updatePitchRoll() {
  roll = atan2(Ax, Az) * RAD_TO_DEG;
  pitch = atan(-Ax / sqrt(Ay * Ay + Az * Az)) * RAD_TO_DEG;
}
void updateYaw() {
  float rollAngle = kalAngleX * DEG_TO_RAD;
  float pitchAngle = kalAngleY * DEG_TO_RAD;

  float fy = MagZ * sin(rollAngle) - MagY * cos(rollAngle);
  float fx = MagX * cos(pitchAngle) + MagY * sin(pitchAngle) * sin(rollAngle) + MagZ * sin(pitchAngle) * cos(rollAngle);
  yaw = atan2(-fy, fx) * RAD_TO_DEG;
  yaw *= -1;
}
float noTiltCompensate() {
  float fx, fy;
  fx = (float)MagX / (Xmax - Xmin);
  fy = (float)MagY / (Ymax - Ymin);
  float heading = atan2(fy, fx);
  return heading;
}
float tiltCompensate() {
  roll = asin(Ay);
  pitch = asin(-Ax);

  if (roll > 0.78 || roll < -0.78 || pitch > 0.78 || pitch < -0.78)
  {
    return -1000;
  }

  float cosRoll = cos(roll);
  float sinRoll = sin(roll);
  float cosPitch = cos(pitch);
  float sinPitch = sin(pitch);

  float Xh = MagX * cosPitch + MagZ * sinPitch;
  float Yh = MagX * sinRoll * sinPitch + MagY * cosRoll - MagZ * sinRoll * cosPitch;

  float heading = atan2(Yh, Xh);

  return heading;
}
float correctAngle(float heading)
{
  if (heading < 0) {
    heading += 2 * PI;
  }
  if (heading > 2 * PI) {
    heading -= 2 * PI;
  }

  return heading;
}
void measureDrift() {
  float cumulatedDrift;
  estDrift = Gz / 131.0;
  maxDrift = 0;
  uint32_t FUSION_stopwatch = millis();
  FUSION_timer = micros();
  int i = 0;
  while (i < 100) { //total required 1 sec
    if (millis() - FUSION_stopwatch > 10) {
      float dt = (float)(micros() - FUSION_timer) / 1000000; // Calculate delta time
      estDrift = Gz / 131.0;
      estDrift += estDrift * dt;
      if (fabs(estDrift) > maxDrift) {
        maxDrift = fabs(estDrift);
      }
      cumulatedDrift += estDrift;
      FUSION_timer = micros();
      i++;
    }
    yield();
  }
  estDrift = (float)cumulatedDrift / i;
  maxDrift *= 1.5;
  if (estDrift < 0) {
    maxDrift *= -1;
    posOffset = fabs(maxDrift);
    negOffset = fabs(maxDrift) / 2;
  }
  else {
    posOffset = fabs(maxDrift) / 2;
    negOffset = fabs(maxDrift);
  }
}
/*End of Sensor Fusion Code---------------------------------------------------*/
/*Encoder Code----------------------------------------------------------------*/
/*Tested to have <1% error when measured Tp is compared to actual Tp with lower standard deviation*/
#define debounceVal 15 //ms

const uint8_t L_EN = D2;
const uint8_t R_EN = D6;

volatile unsigned long L_micros = 0, R_micros = 0; //for managing debounce
bool  L_move = 0, R_move = 0;
const int ENC_SAMPLES = 5;
unsigned long L_timer = 0, R_timer = 0;
int   L_tp[ENC_SAMPLES], R_tp[ENC_SAMPLES];
volatile float L_avgtp = 0, R_avgtp = 0;  //volatile because can change in interrupt
volatile long  L_tso = 0, R_tso = 0, L_tss = 0, R_tss = 0;
long  L_tsg = 0, R_tsg = 0;
int   L_counter = 0, R_counter = 0;
float L_rpm = 0, R_rpm = 0;

void ICACHE_RAM_ATTR L_Callback() {
  if ((long)(micros() - L_micros) >= debounceVal * 1000) {
    if (digitalRead(L_EN)) { //check if L_EN pin is high
      if (L_move) { //if Left motor is controlled by NodeMCU to move
        if (L_tss == 0) { //if tick since stop is 0, this is the first tick, not counted because motor stopped for long periods
          //L_avgtp = millis() - L_avgtp;
          L_timer = millis(); //reset timer for tick
          L_tss++;  //1 tick and above means that motor is moving
        }
        else { //1 tick and above
          L_tp[L_counter] = millis() - L_timer; //calculate period between ticks
          L_timer = millis(); //reset timer for tick
          L_avgtp = 0;  //reset previous avg period
          L_counter++; L_tss++; //L_tso++;  //increment, L_counter is for n sample of array, L_tss is to count tick since stop, L_tso is tick since on
          int i;  //local variable, so as to not disrupt other functions
          for (i = 0; i < (L_tss - 1) && i < ENC_SAMPLES; i++) { //L_tss-1 because first tick doesn't count, ENC_SAMPLES is max sample to store
            L_avgtp += L_tp[i]; //add up all existing samples, if there is only 1 sample, L_tss = 2, (L_tss-1) is >= ENC_SAMPLES after 5+1 ticks
          }
          L_avgtp = (float)L_avgtp / i; //take accumulated period and divide by i(number of samples added up) to get average period
          L_rpm = (float)3000 / L_avgtp;; //calculated rpm, 60000ms / L_avgtp ms / 20 ticks => 3000/L_avgtp
          if (L_counter == ENC_SAMPLES) //if L_counter reaches ENC_SAMPLES, array is full, restart from beginning
            L_counter = 0;  //reset L_counter
          //Serial.printf("L_TP:%.2fms,L_RPM:%.2f\n",L_avgtp,L_rpm);
        }
      }
      else {  //Left motor is either moved by external force, or leftover momentum after stopped
        L_tsg++;
      }
      L_tso++;  //accumulate ticks since on for dead reckoning positioning
    }
    L_micros = micros();
  }
}
void ICACHE_RAM_ATTR R_Callback() {
  if ((long)(micros() - R_micros) >= debounceVal * 1000) {
    if (digitalRead(R_EN)) { //check if R_EN pin is high
      if (R_move) { //if Right motor is controlled by NodeMCU to move
        if (R_tss == 0) { //if tick since stop is 0, this is the first tick, not counted because motor stopped for long periods
          R_timer = millis(); //reset timer for tick
          R_tss++;  //1 tick and above means that motor is moving
        }
        else { //1 tick and above
          R_tp[R_counter] = millis() - R_timer; //calculate period between ticks
          R_timer = millis(); //reset timer for tick
          R_avgtp = 0;  //reset previous avg period
          R_counter++; R_tss++; //R_tso++;  //increment, R_counter is for n sample of array, R_tss is to count tick since stop, R_tso is tick since on
          int i;  //local variable, so as to not disrupt other functions
          for (i = 0; i < (R_tss - 1) && i < ENC_SAMPLES; i++) { //L_tss-1 because first tick doesn't count, ENC_SAMPLES is max sample to store
            R_avgtp += R_tp[i]; //add up all existing samples, if there is only 1 sample, R_tss = 2, (R_tss-1) is >= ENC_SAMPLES after 5+1 ticks
          }
          R_avgtp = (float)R_avgtp / i; //take accumulated period and divide by i(number of samples added up) to get average period
          R_rpm = (float)3000 / R_avgtp;; //calculated rpm, 60000ms / R_avgtp ms / 20 ticks => 3000/R_avgtp
          if (R_counter == ENC_SAMPLES) //if R_counter reaches ENC_SAMPLES, array is full, restart from beginning
            R_counter = 0;